<div>
	<h3>
		Recipe Ingredients
	</h3>

	<div
	  id="Recipe_RecipeIngredient-new_RecipeIngredients-div"
	>
	</div>

	{% include "New/Recipe/RecipeIngredient/Modal.j2" %}

	<button
	  type="button"
	  class="btn btn-light"
	  data-bs-toggle="modal"
	  data-bs-target="#Recipe_RecipeIngredient-new_RecipeIngredient-modal"
	>
		Add Ingredient
	</button>
</div>


<script>
	// ——————————————————————————————————————————————————— SUBMIT ——————————————————————————————————————————————————— //

	function New_RecipeIngredient_json_builder()
	{
		const recipe_ingredients_div = document.getElementById("recipe_ingredients-div");
		const recipe_ingredient_divs = recipe_ingredients_div.getElementsByClassName("recipe_ingredient-div");

		const recipe_ingredients = [];
		for(let x = 0; x < recipe_ingredient_divs.length; x++)
		{
			const recipe_ingredient = {
				names: [
					recipe_ingredient_divs[x].getElementsByClassName("ingredient_singular_name-input")[0].value,
					recipe_ingredient_divs[x].getElementsByClassName("ingredient_plural_name-input")[0].value
				],
				brand: recipe_ingredient_divs[x].getElementsByClassName("ingredient_brand-input")[0].value,
				description:
				  recipe_ingredient_divs[x].getElementsByClassName("ingredient_description-textarea")[0].value,
				amount: recipe_ingredient_divs[x].getElementsByClassName("recipe_ingredient_amount-input")[0].value,
				units: [
					recipe_ingredient_divs[x].getElementsByClassName("recipe_ingredient_units_singular-input")[0].value,
					recipe_ingredient_divs[x].getElementsByClassName("recipe_ingredient_units_plural-input")[0].value,
				],
				quality: recipe_ingredient_divs[x].getElementsByClassName("recipe_ingredient_quality-input")[0].value,
				is_required:
				  recipe_ingredient_divs[x].getElementsByClassName("recipe_ingredient_is_required-select")[0].value,
				notes: recipe_ingredient_divs[x].getElementsByClassName("recipe_ingredient_notes-textarea")[0].value
			}
			recipe_ingredients.push(recipe_ingredient);
		}

		return recipe_ingredients;
	}


	// —————————————————————————————————————————————————— DISPLAY  —————————————————————————————————————————————————— //

	Recipe.RecipeIngredient =
	{
		Modal:
		{
			add_RecipeIngredient_from_modal_to_new_RecipeIngredients:
			function()
			{
				const recipe_ingredients_div = document.getElementById("Recipe_RecipeIngredient-new_RecipeIngredients-div");

				const recipe_ingredient_data =
				{
					names:
					[
						document.getElementById("Recipe_RecipeIngredient-name_singular-modal-input").value,
						document.getElementById("Recipe_RecipeIngredient-name_plural-modal-input").value
					],
					brand: document.getElementById("Recipe_RecipeIngredient-brand-modal-input").value,
					description: document.getElementById("Recipe_RecipeIngredient-description-modal-textarea").value,
					group: document.getElementById("Recipe_RecipeIngredient-group-modal-input").value,
					amount: document.getElementById("Recipe_RecipeIngredient-amount-modal-input").value,
					units:
					[
						document.getElementById("Recipe_RecipeIngredient-unit_singular-modal-input").value,
						document.getElementById("Recipe_RecipeIngredient-unit_plural-modal-input").value
					],
					quality: document.getElementById("Recipe_RecipeIngredient-quality-modal-input").value,
					is_required: document.getElementById("Recipe_RecipeIngredient-is_required-modal-select").value,
					notes: document.getElementById("Recipe_RecipeIngredient-notes-modal-textarea").value
				};

				var xmlhttp = new XMLHttpRequest();
				xmlhttp.open("POST", "/new/recipe/recipe_ingredient", false);
				xmlhttp.setRequestHeader("Content-Type", "application/json");
				xmlhttp.send(JSON.stringify(recipe_ingredient_data));
				if(xmlhttp.status == 400)
				{
					return alert('There was an error 400');
				}
				else if(xmlhttp.status != 200)
				{
					return alert('add_new_recipe_ingredient_html::something else other than 200 was returned');
				}

				recipe_ingredients_div.appendChild(html_to_element(xmlhttp.responseText));
				$('#Recipe_RecipeIngredient-new_RecipeIngredient-modal').modal('hide');
			}
		},

		delete_RecipeIngredient_from_new_RecipeIngredients:
		function(uuid)
		{
			const new_RecipeIngredient_div = document.getElementById(`new_RecipeIngredient-${uuid}-div`)
			const recipe_ingredients_div = new_RecipeIngredient_div.parentNode;
			recipe_ingredients_div.removeChild(new_RecipeIngredient_div);
		}
	};




	// ————————————————————————————————————————————————— DATA  LIST ————————————————————————————————————————————————— //

	function datalist_options(datalist_ingredients)
	{
		let singular_datalist_options = "";
		let plural_datalist_options = "";
		for(var x = 0; x < datalist_ingredients.length; x++)
		{
			let ingredient = datalist_ingredients[x];

			singular_datalist_options += `<option
					  ingredient-id="${ingredient.id}"
					  value="${ingredient.names[0]}"
					>
						${ingredient.brand}
					</option>`;

			plural_datalist_options += `<option
					  ingredient-id="${ingredient.id}"
					  value="${ingredient.names[1]}"
					>
						${ingredient.brand}
					</option>`;
		}

		return []
	}

	function update_ingredient(input)
	{
		const recipe_ingredient_div = input.closest(".recipe_ingredient-div");

		const singular_name = recipe_ingredient_div.querySelector(".ingredient_singular_name-input").value;
		const singular_datalist = recipe_ingredient_div.querySelector(".ingredient_name_singular-datalist");

		const plural_name = recipe_ingredient_div.querySelector(".ingredient_plural_name-input").value;
		const plural_datalist = recipe_ingredient_div.querySelector(".ingredient_name_plural-datalist");

		const brand_name = recipe_ingredient_div.querySelector(".ingredient_brand-input").value;

		let datalist_ingredients = [];
		for(var x = 0; x < INGREDIENTS.length; x++)
		{
			let ingredient = INGREDIENTS[x];
			if(singular_name == ingredient.names[0].substring(0, singular_name.length)
			  && plural_name == ingredient.names[1].substring(0, plural_name.length)
			  && brand_name == ingredient.brand.substring(0, brand_name.length)
			)
			{
				datalist_ingredients.push(ingredient);
			}
		}

		const [singular_datalist_options, plural_datalist_options] = datalist_options(datalist_ingredients)

		const singular_fragment = document.createRange().createContextualFragment(singular_datalist_options);
		const plural_fragment = document.createRange().createContextualFragment(plural_datalist_options);
		singular_datalist.replaceChildren(...singular_fragment);
		plural_datalist.replaceChildren(...plural_fragment);
	}


	const INGREDIENTS = JSON.parse(`{{ ingredients | str }}`);
</script>