<script>
	Recipe.Instructions = {};  // Initialize namespace `Recipe.Instructions`
</script>
<div>

	<h3>
		Instructions
	</h3>

	<div
	  id="Recipe_Instruction-new_Instructions-div"
	>
	</div>

	{% include("New/Recipe/Instructions/Modal.j2") %}

	<button
	  type="button"
	  class="btn btn-light"
	  data-bs-toggle="modal"
	  data-bs-target="#Recipe_Instructions-new_Instruction_list-modal"
	>
		Add List
	</button>
	<button
	  type="button"
	  class="btn btn-light"
	  data-bs-toggle="modal"
	  data-bs-target="#Recipe_Instructions_Modal-new_Instruction_section-modal"
	>
		Add Section
	</button>
</div>

<script>
	// —————————————————————————————————————————————— INSTRUCTION  —————————————————————————————————————————————— //

	function add_section_dictionary(button, replace=false)
	{
		var xmlhttp = new XMLHttpRequest();
		xmlhttp.open("GET", `/new/instruction/section-dictionary`, false);
		xmlhttp.send();
		if(xmlhttp.status == 400)
		{
			return alert("add_section_dictionary::There was an error 400");
		}
		else if(xmlhttp.status != 200)
		{
			return alert("add_section_dictionary::something else other than 200 was returned");
		}

		if(replace)
		{
			const parent = button.parentNode.querySelector(".content");
			parent.replaceChildren();
		}

		const fragment = document.createRange().createContextualFragment(xmlhttp.responseText);
		button.parentNode.querySelector(".content").appendChild(fragment);
	}


	function add_section(button, replace=false)
	{
		var xmlhttp = new XMLHttpRequest();
		xmlhttp.open("GET", `/new/instruction/section`, false);
		xmlhttp.send();
		if(xmlhttp.status == 400)
		{
			return alert("add_section::There was an error 400");
		}
		else if(xmlhttp.status != 200)
		{
			return alert("add_section::something else other than 200 was returned");
		}

		if(replace)
		{
			const parent = button.parentNode.querySelector(".content");
			parent.replaceChildren();
		}

		const fragment = document.createRange().createContextualFragment(xmlhttp.responseText);
		button.parentNode.querySelector(".content").appendChild(fragment);
	}


	function add_step_list(button, replace=false)
	{
		var xmlhttp = new XMLHttpRequest();
		xmlhttp.open("GET", `/new/instruction/step-list`, false);
		xmlhttp.send();
		if(xmlhttp.status == 400)
		{
			return alert("add_step_list::There was an error 400");
		}
		else if(xmlhttp.status != 200)
		{
			return alert("add_step_list::something else other than 200 was returned");
		}

		if(replace)
		{
			const parent = button.parentNode.querySelector(".content");
			parent.replaceChildren();

		}

		const fragment = document.createRange().createContextualFragment(xmlhttp.responseText);
		button.parentNode.querySelector(".content").appendChild(fragment);
	}


	function add_step(button, replace=false)
	{
		var xmlhttp = new XMLHttpRequest();
		xmlhttp.open("GET", `/new/instruction/step`, false);
		xmlhttp.send();
		if(xmlhttp.status == 400)
		{
			return alert("add_step::There was an error 400");
		}
		else if(xmlhttp.status != 200)
		{
			return alert("add_step::something else other than 200 was returned");
		}

		if(replace)
		{
			const parent = button.parentNode.querySelector(".content");
			parent.replaceChildren();
		}

		const fragment = document.createRange().createContextualFragment(xmlhttp.responseText);
		button.parentNode.querySelector(".content").appendChild(fragment);
	}
</script>
