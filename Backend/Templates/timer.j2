
<!----------------------------------------------------------------------------------------------------------------------
-                                                                                                                      -
-    Created by: MPZinke on 2023.01.22                                                                                 -
-                                                                                                                      -
-    DESCRIPTION:                                                                                                      -
-    BUGS:                                                                                                             -
-    FUTURE:                                                                                                           -
-                                                                                                                      -
----------------------------------------------------------------------------------------------------------------------->


<div>
	<h1 id="time_h1">
	</h1>

	<div id="finished_div">
	</div>

	<button id="reset_button" onclick="reset();">
		Reset
	</button>
	<button id="pause_button" onclick="pause();">
		Pause
	</button>
	<button id="resume_button" onclick="resume();">
		Resume
	</button>
	<button id="start_button" onclick="start();">
		Start
	</button>
</div>


<script>
	const TIME_H1 = document.getElementById("time_h1");
	const PAUSE_BUTTON = document.getElementById("pause_button");
	const RESUME_BUTTON = document.getElementById("resume_button");
	const START_BUTTON = document.getElementById("start_button");

	// "end_time": Controls whether the timer is set & running
	// "is_running": Controls whether a timer is currently counting down
	// "paused_remaining_duration": Controls whether the timer is paused & how much time is remaining
	// "timer_duration": Controls whether the current timer is valid

	let BLINK_THREAD = null;
	let TIMER_THREAD = null;


	function parse_duration_from_url()
	{
		const url = window.location.href;
		const url_parts = url.split("/");
		const duration_part = url_parts[url_parts.length-1];

		const duration_parts = duration_part.split(":");
		const hours = parseInt(duration_parts[0]);
		const minutes = parseInt(duration_parts[1]);
		const seconds = parseInt(duration_parts[2]);

		return hours * 3_600_000 + minutes * 60_000 + seconds * 1_000;
	}


	function get_session_var(key)
	{
		return JSON.parse(window.sessionStorage.getItem(key));
	}


	function set_session_var(key, value)
	{
		window.sessionStorage.setItem(key, value);
	}


	// —————————————————————————————————————————————————— DISPLAY  —————————————————————————————————————————————————— //

	function blink(element)
	{
		show_resume_button();
		element.style.opacity = element.style.opacity == 0.0 ? 1.0 : 0.0;
	}


	function display_completed_timer()
	{

	}


	function display_paused_timer()
	{
		show_resume_button();
		update_time(Math.round(get_session_var("paused_remaining_duration")));
	}


	function display_reset_timer()
	{
		
	}


	function display_running_timer()
	{
		show_pause_button();
		update_time(Math.round(get_session_var("end_time") - Date.now()));
	}


	function reset_display()
	{
		stop_blink(TIME_H1);

		show_start_button();
		update_time(get_session_var("timer_duration"));
	}


	function show_pause_button()
	{
		PAUSE_BUTTON.hidden = false;
		RESUME_BUTTON.hidden = true;
		START_BUTTON.hidden = true;
	}


	function show_resume_button()
	{
		PAUSE_BUTTON.hidden = true;
		RESUME_BUTTON.hidden = false;
		START_BUTTON.hidden = true;
	}


	function show_start_button()
	{
		PAUSE_BUTTON.hidden = true;
		RESUME_BUTTON.hidden = true;
		START_BUTTON.hidden = false;
	}


	function show_time_h1()
	{
		TIME_H1.style.opacity = 1.0;
	}


	function stop_blink(element)
	{
		if(BLINK_THREAD != null)
		{
			clearInterval(BLINK_THREAD);
			BLINK_THREAD = null;
		}

		element.style.opacity = 1.0;
	}


	function update_page()
	{
		TIME_H1.style.opacity = 1.0;

		// If timer is running.
		if(window.sessionStorage.getItem("is_running") != null)
		{
			show_pause_button();
			update_time(Math.round(get_session_var("end_time") - Date.now()));
		}
		// If timer is paused
		else if(get_session_var("paused_remaining_duration"))
		{
			show_resume_button();
			update_time(get_session_var("paused_remaining_duration"));
		}
		// If timer has completed
		else
		{
			show_start_button();
			update_time(get_session_var("timer_duration"));
		}
	}


	function update_time(duration_ms)
	{
		TIME_H1.innerHTML = Math.round(duration_ms / 1_000);
	}


	// —————————————————————————————————————————————————— ACTIONS  —————————————————————————————————————————————————— //

	function alarm()
	{
		reset_timer();
		alert("Time is up");  // TODO: ALARM

	}

	function countdown()
	{
		if(get_session_var("end_time") < Date.now())
		{
			return alarm();
		}

		let remaining_time = get_session_var("end_time") - Date.now();
		update_time(remaining_time);
		show_pause_button();
	}


	// ——————————————————————————————————————————————————— TIMER  ——————————————————————————————————————————————————— //

	function load_timer()
	{
		/*
		SUMMARY: If a remaining interval exists in storage, continue timer.
		*/
		TIMER_THREAD = setInterval(countdown, 200);
	}


	function pause_timer()
	{
		/*
		SUMMARY: Stops the countdown and saves the remaining time.
		*/
		stop_timer();

		set_session_var("paused_remaining_duration", get_session_var("end_time") - Date.now());
		window.sessionStorage.removeItem("end_time");
	}


	function reset_timer()
	{
		/*
		SUMMARY: Stops a timer and resets the end time.
		*/
		stop_timer();

		window.sessionStorage.removeItem("end_time");
		window.sessionStorage.removeItem("is_running");
		window.sessionStorage.removeItem("paused_remaining_duration");
		set_session_var("timer_duration", parse_duration_from_url());
	}


	function resume_timer()
	{
		/*
		SUMMARY: Resumes at timer after being paused.
		*/
		set_session_var("end_time", Date.now() + get_session_var("paused_remaining_duration"));

		set_session_var("is_running", true);
		window.sessionStorage.removeItem("paused_remaining_duration");

		TIMER_THREAD = setInterval(countdown, 200);
	}


	function start_timer()
	{
		/*
		SUMMARY: Start a timer if none exists and continues for remaining amount if a timer does exist.
		*/
		// Since a timer has started, we can assume it is going based off of the URL.
		let timer_duration = parse_duration_from_url();
		set_session_var("timer_duration", timer_duration);
		set_session_var("end_time", Date.now() + timer_duration);
		set_session_var("is_running", true);

		TIMER_THREAD = setInterval(countdown, 200);
	}


	function stop_timer()
	{
		/*
		SUMMARY: Stop the count down.
		*/
		if(TIMER_THREAD != null)
		{
			clearInterval(TIMER_THREAD);
			TIMER_THREAD = null;
		}

		set_session_var("is_running", false);
	}


	// —————————————————————————————————————————— TIMER-DISPLAY  FUNCTIONS —————————————————————————————————————————— //

	function pause()
	{
		pause_timer();

		show_resume_button();
		BLINK_THREAD = setInterval(() => { blink(TIME_H1); }, 750);
	}


	function reset()
	{
		reset_timer();
		reset_display();
	}


	function resume()
	{
		resume_timer();
		stop_blink(TIME_H1);
		display_running_timer();
	}


	function start()
	{
		start_timer();
		display_running_timer();
	}


	// ———————————————————————————————————————————————————— RUN  ———————————————————————————————————————————————————— //

	// A timer has completed regardless of whether it was running
	if(get_session_var("end_time") != null && get_session_var("end_time") <= Date.now())
	{
		// Print completion time
	}
	// If timer is not complete && duration is unchanged
		// Continue timer
	else if(get_session_var("is_running") == true
	  && get_session_var("timer_duration") == parse_duration_from_url()
	  && get_session_var("end_time") > Date.now())
	/* [IMPLICIT] && window.sessionStorage.getItem("timer_duration") != parse_duration_from_url() */
	{
		load_timer();
		display_running_timer();
	}
	// If a paused timer exists,
		// Load paused timer
	else if(get_session_var("paused_remaining_duration") != null)
	{
		display_paused_timer();
	}
	// If a timer's duration has changed or the timer is not longer running.
		// Setup page for new timer
	else
	{
		reset_timer();  // invalidate the endtime
		reset_display();
	}

</script>
