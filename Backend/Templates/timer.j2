
<!----------------------------------------------------------------------------------------------------------------------
-                                                                                                                      -
-    Created by: MPZinke on 2023.01.22                                                                                 -
-                                                                                                                      -
-    DESCRIPTION:                                                                                                      -
-    BUGS:                                                                                                             -
-    FUTURE:                                                                                                           -
-                                                                                                                      -
----------------------------------------------------------------------------------------------------------------------->


<div>
	<h1 id="time_h1">
	</h1>

	<div id="finished_div">
	</div>

	<button id="reset_button" onclick="reset();">
		Reset
	</button>
	<button id="pause_button" onclick="pause();">
		Pause
	</button>
	<button id="resume_button" onclick="resume();">
		Resume
	</button>
	<button id="start_button" onclick="start();">
		Start
	</button>
</div>


<script>
	const TIME_H1 = document.getElementById("time_h1");
	const PAUSE_BUTTON = document.getElementById("pause_button");
	const RESUME_BUTTON = document.getElementById("resume_button");
	const START_BUTTON = document.getElementById("start_button");

	// "end_time": Controls whether the timer is set & running
	// "is_running": Controls whether a timer is currently counting down
	// "paused_remaining_duration": Controls whether the timer is paused & how much time is remaining
	// "timer_duration": Controls whether the current timer is valid

	let UPDATE_THREAD = null;


	function parse_duration_from_url()
	{
		const url = window.location.href;
		const url_parts = url.split("/");
		const duration_part = url_parts[url_parts.length-1];

		const duration_parts = duration_part.split(":");
		const hours = parseInt(duration_parts[0]);
		const minutes = parseInt(duration_parts[1]);
		const seconds = parseInt(duration_parts[2]);

		return hours * 3_600_000 + minutes * 60_000 + seconds * 1_000;
	}


	// —————————————————————————————————————————————————— DISPLAY  —————————————————————————————————————————————————— //

	function flash_time()
	{
		show_resume_button();
		TIME_H1.style.opacity = TIME_H1.style.opacity == 0.0 ? 1.0 : 0.0;
	}


	function show_pause_button()
	{
		PAUSE_BUTTON.hidden = false;
		RESUME_BUTTON.hidden = true;
		START_BUTTON.hidden = true;
	}


	function show_resume_button()
	{
		PAUSE_BUTTON.hidden = true;
		RESUME_BUTTON.hidden = false;
		START_BUTTON.hidden = true;
	}


	function show_start_button()
	{
		PAUSE_BUTTON.hidden = true;
		RESUME_BUTTON.hidden = true;
		START_BUTTON.hidden = false;
	}


	function update_page()
	{
		TIME_H1.style.opacity = 1.0;

		// If timer is running.
		if(window.sessionStorage.getItem("is_running") != null)
		{
			show_pause_button();

			print_time(Math.round(window.sessionStorage.getItem("end_time") - Date.now()));
		}
		// If timer is paused
		else if(window.sessionStorage.getItem("paused_remaining_duration"))
		{
			show_resume_button();

			print_time(window.sessionStorage.getItem("paused_remaining_duration"));
		}
		// If timer has completed
		else
		{
			show_start_button();

			print_time(window.sessionStorage.getItem("timer_duration"));
		}
	}


	function print_time(duration_ms)
	{
		TIME_H1.innerHTML = Math.round(duration_ms / 1_000);
	}


	// ——————————————————————————————————————————————————— TIMER  ——————————————————————————————————————————————————— //

	function countdown()
	{
		let remaining_time = 0;
		if(window.sessionStorage.getItem("end_time") < Date.now())
		{
			reset_timer();
			alert("Time is up");  // TODO: ALARM
		}
		else
		{
			remaining_time = window.sessionStorage.getItem("end_time") - Date.now();
		}

		update_page();
	}


	function load_timer()
	{
		/*
		SUMMARY: If a remaining interval exists in storage, continue timer.
		*/
		UPDATE_THREAD = setInterval(countdown, 200);
	}


	function pause_timer()
	{
		/*
		SUMMARY: Stops the countdown and saves the remaining time.
		*/
		stop_timer();

		const end_time = window.sessionStorage.getItem("end_time");
		window.sessionStorage.setItem("paused_remaining_duration", end_time - Date.now());
		window.sessionStorage.removeItem("end_time");

		UPDATE_THREAD = setInterval(flash_time, 750);
	}


	function reset_timer()
	{
		/*
		SUMMARY: Stops a timer and resets the end time.
		*/
		stop_timer();

		window.sessionStorage.removeItem("end_time");
		window.sessionStorage.removeItem("is_running");
		window.sessionStorage.removeItem("paused_remaining_duration");
	}


	function resume_timer()
	{
		let remaining_time = parseInt(window.sessionStorage.getItem("paused_remaining_duration"));
		window.sessionStorage.setItem("end_time", Date.now() + remaining_time);

		window.sessionStorage.setItem("is_running", true);
		window.sessionStorage.removeItem("paused_remaining_duration");

		clearInterval(UPDATE_THREAD);
		UPDATE_THREAD = setInterval(countdown, 200);
	}


	function start_timer()
	{
		/*
		SUMMARY: Start a timer if none exists and continues for remaining amount if a timer does exist.
		*/
		// Since a timer has started, we can assume it is going based off of the URL.
		window.sessionStorage.setItem("timer_duration", parse_duration_from_url());

		let timer_duration = parseInt(window.sessionStorage.getItem("timer_duration"));
		window.sessionStorage.setItem("end_time", Date.now() + timer_duration);
		window.sessionStorage.setItem("is_running", true);

		UPDATE_THREAD = setInterval(countdown, 200);
	}


	function stop_timer()
	{
		/*
		SUMMARY: Stop the count down.
		*/
		if(UPDATE_THREAD != null)
		{
			clearInterval(UPDATE_THREAD);
			UPDATE_THREAD = null;
		}

		window.sessionStorage.removeItem("is_running");
	}


	// —————————————————————————————————————————— TIMER-DISPLAY  FUNCTIONS —————————————————————————————————————————— //

	function pause()
	{
		pause_timer();
		show_resume_button();
	}


	function reset()
	{
		reset_timer();
		update_page();
	}


	function resume()
	{
		resume_timer();
		update_page();
	}


	function start()
	{
		start_timer();
		update_page();
	}


	// ———————————————————————————————————————————————————— RUN  ———————————————————————————————————————————————————— //


	// A timer has completed
	if(parseInt(window.sessionStorage.getItem("end_time")) <= Date.now())
	{
		// Print completion time
	}
	// If a timer's duration has changed 
		// Start a new timer
	else if(window.sessionStorage.getItem("timer_duration") != null
	  && window.sessionStorage.getItem("timer_duration") != parse_duration_from_url())
	{
		reset_timer();  // invalidate the endtime
		window.sessionStorage.setItem("timer_duration", parse_duration_from_url());
		update_page();
	}
	// If timer is not complete && duration is unchanged
		// Continue timer
	else if(JSON.parse(window.sessionStorage.getItem("is_running")) == true
	/* [IMPLICIT] && window.sessionStorage.getItem("timer_duration") != parse_duration_from_url() */
	  && parseInt(window.sessionStorage.getItem("end_time")) > Date.now())
	{
		load_timer();
		update_page();
	}
	else
	{
		window.sessionStorage.setItem("timer_duration", parse_duration_from_url());
		update_page();
	}

</script>
