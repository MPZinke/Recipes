<h3>
	Recipe Instructions
</h3>
<div
  id="recipe_instructions-div"
>
	<div
	  class="content"
	>
		<button
			type="button"
			onclick="add_step_list(this.parentNode, true);"
		>
			+ Add List
		</button>
		<button"
		  type="button"
		  onclick="add_section_dictionary(this.parentNode, true);"
		>
			+ Add Section
		</button>
	</div>
</div>

<script>
	// —————————————————————————————————————————————— INSTRUCTION  —————————————————————————————————————————————— //

	function add_section_dictionary(button, replace=false)
	{
		var xmlhttp = new XMLHttpRequest();
		xmlhttp.open("GET", `/new/instruction/section-dictionary`, false);
		xmlhttp.send();
		if(xmlhttp.status == 400)
		{
			return alert("add_section_dictionary::There was an error 400");
		}
		else if(xmlhttp.status != 200)
		{
			return alert("add_section_dictionary::something else other than 200 was returned");
		}

		if(replace)
		{
			const parent = button.parentNode.querySelector(".content");
			parent.replaceChildren();
		}

		const fragment = document.createRange().createContextualFragment(xmlhttp.responseText);
		button.parentNode.querySelector(".content").appendChild(fragment);
	}


	function add_section(button, replace=false)
	{
		var xmlhttp = new XMLHttpRequest();
		xmlhttp.open("GET", `/new/instruction/section`, false);
		xmlhttp.send();
		if(xmlhttp.status == 400)
		{
			return alert("add_section::There was an error 400");
		}
		else if(xmlhttp.status != 200)
		{
			return alert("add_section::something else other than 200 was returned");
		}

		if(replace)
		{
			const parent = button.parentNode.querySelector(".content");
			parent.replaceChildren();
		}

		const fragment = document.createRange().createContextualFragment(xmlhttp.responseText);
		button.parentNode.querySelector(".content").appendChild(fragment);
	}


	function add_step_list(button, replace=false)
	{
		var xmlhttp = new XMLHttpRequest();
		xmlhttp.open("GET", `/new/instruction/step-list`, false);
		xmlhttp.send();
		if(xmlhttp.status == 400)
		{
			return alert("add_step_list::There was an error 400");
		}
		else if(xmlhttp.status != 200)
		{
			return alert("add_step_list::something else other than 200 was returned");
		}

		if(replace)
		{
			const parent = button.parentNode.querySelector(".content");
			parent.replaceChildren();

		}

		const fragment = document.createRange().createContextualFragment(xmlhttp.responseText);
		button.parentNode.querySelector(".content").appendChild(fragment);
	}


	function add_step(button, replace=false)
	{
		var xmlhttp = new XMLHttpRequest();
		xmlhttp.open("GET", `/new/instruction/step`, false);
		xmlhttp.send();
		if(xmlhttp.status == 400)
		{
			return alert("add_step::There was an error 400");
		}
		else if(xmlhttp.status != 200)
		{
			return alert("add_step::something else other than 200 was returned");
		}

		if(replace)
		{
			const parent = button.parentNode.querySelector(".content");
			parent.replaceChildren();
		}

		const fragment = document.createRange().createContextualFragment(xmlhttp.responseText);
		button.parentNode.querySelector(".content").appendChild(fragment);
	}
</script>
