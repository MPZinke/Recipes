
<!----------------------------------------------------------------------------------------------------------------------
-                                                                                                                      -
-    Created by: MPZinke on 2023.02.05                                                                                 -
-                                                                                                                      -
-    DESCRIPTION:                                                                                                      -
-    BUGS:                                                                                                             -
-    FUTURE:                                                                                                           -
-                                                                                                                      -
----------------------------------------------------------------------------------------------------------------------->


{% extends "Header.j2" %}
{% block body %}
	<form>
		<title>
			New Recipe
		</title>
		<h3>
			Recipe
		</h3>
		<table>
			<tr>
				<td>
					Recipe Name
				</td>
				<td>
					<input name="name-input" id="name-input" type="text"/>
				</td>
			</tr>
			<tr>
				<td>
					Instructions
				</td>
				<td>
					<input name="instructions-input" id="instructions-input" type="text"/>
				</td>
			</tr>
			<tr>
				<td>
					Notes
				</td>
				<td>
					<input name="notes-input" id="notes-input" type="text"/>
				</td>
			</tr>
			<tr>
				<td>
					Rating
				</td>
				<td>
					<input name="rating-input" id="rating-input" type="text"/>
				</td>
			</tr>
			<tr>
				<td>
					Servings
				</td>
				<td>
					<input name="servings-input" id="servings-input" type="text"/>
				</td>
			</tr>
			<tr>
				<td>
					Total Time
				</td>
				<td>
					<input name="total_time-input" id="total_time-input" type="text"/>
				</td>
			</tr>
			<tr>
				<td>
					Prep Time
				</td>
				<td>
					<input name="prep_time-input" id="prep_time-input" type="text"/>
				</td>
			</tr>
			<tr>
				<td>
					Cook Time
				</td>
				<td>
					<input name="cook_time-input" id="cook_time-input" type="text"/>
				</td>
			</tr>
		</table>

		<h3>
			Recipe Ingredients
		</h3>
		<div id="recipe_ingredients-div">
			{% with count=1 %}
				{% include "New/RecipeIngredient/New.j2" %}
			{% endwith %}
		</div>

		<button type="button" onclick="add_new_recipe_ingredient_html();">
			+ Add An Ingredient
		</button>
	</form>

	<script>
		function add_new_recipe_ingredient_html()
		{
			const recipe_ingredients_div = document.getElementById("recipe_ingredients-div");

			var xmlhttp = new XMLHttpRequest();
			xmlhttp.open("GET", `/new/recipe_ingredient`, false);
			xmlhttp.send();
			if(xmlhttp.status == 400)
			{
				alert('There was an error 400');
			}
			else if(xmlhttp.status != 200)
			{
				alert('add_new_recipe_ingredient_html::something else other than 200 was returned');
			}

			recipe_ingredients_div.innerHTML += xmlhttp.responseText;
		}


		function add_ingredient_html(select)
		{
			const recipe_ingredients_div = document.getElementById("recipe_ingredients-div");

			const button_html = get_button_html();

			var xmlhttp = new XMLHttpRequest();
			xmlhttp.open("GET", `/new/recipe_ingredient/ingredient/${select.value}`, false);
			xmlhttp.send();

			if(xmlhttp.status == 400)
			{
				return alert('There was an error 400');
			}
			else if(xmlhttp.status != 200)
			{
				return alert('add_ingredient_html::something else other than 200 was returned');
			}

			select.parentNode.innerHTML = `${xmlhttp.responseText}<br/>— OR —<br/>${button_html}`;
		}


		function add_new_ingredient_html(button)
		{
			const recipe_ingredients_div = document.getElementById("recipe_ingredients-div");
			const count = recipe_ingredients_div.children.length;

			const select_html = get_select_html();

			var xmlhttp = new XMLHttpRequest();
			xmlhttp.open("GET", `/new/recipe_ingredient/ingredient`, false);
			xmlhttp.send(null);
			if(xmlhttp.status == 400)
			{
				return alert('There was an error 400');
			}
			else if(xmlhttp.status != 200)
			{
				return alert('add_new_ingredient_html::2something else other than 200 was returned');
			}
			button.parentNode.innerHTML = `${xmlhttp.responseText}<br/>— OR —<br/>${select_html}`;
		}


		function delete_ingredient(ingredient_div)
		{
			const recipe_ingredients_div = ingredient_div.parentNode;
			recipe_ingredients_div.removeChild(ingredient_div);

			const recipe_ingredients = recipe_ingredients_div.children;
			if(recipe_ingredients.length == 0)
			{
				add_new_recipe_ingredient_html();
			}
			else
			{
				for(let x = 0; x < recipe_ingredients.length; x++){}
			}
		}


		function determine_ingredient_td(element)
		{
			return document.querySelector("p").closest(".near.ancestor");
		}


		function get_button_html()
		{
			var xmlhttp = new XMLHttpRequest();
			xmlhttp.open("GET", `/new/recipe_ingredient/ingredient/button`, false);
			xmlhttp.send(null);

			if(xmlhttp.status == 400)
			{
				return alert('There was an error 400');
			}
			else if(xmlhttp.status != 200)
			{
				return alert('get_button_html::1something else other than 200 was returned');
			}

			return xmlhttp.responseText;
		}


		function get_select_html()
		{
			var xmlhttp = new XMLHttpRequest();
			xmlhttp.open("GET", `/new/recipe_ingredient/ingredient/select`, false);
			xmlhttp.send(null);

			if(xmlhttp.status == 400)
			{
				return alert('There was an error 400');
			}
			else if(xmlhttp.status != 200)
			{
				return alert('get_select_html::1something else other than 200 was returned');
			}

			return xmlhttp.responseText;
		}
	</script>
{% endblock %}